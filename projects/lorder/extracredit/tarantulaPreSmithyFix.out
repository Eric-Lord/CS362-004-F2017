   1:#include "dominion.h"
   2:#include "dominion_helpers.h"
   3:#include "rngs.h"
   4:#include <stdio.h>
   5:#include <math.h>
   6:#include <stdlib.h>
   7:
## 8:int compare(const void* a, const void* b) {
## 9:  if (*(int*)a > *(int*)b)
###10:    return 1;
## 11:  if (*(int*)a < *(int*)b)
## 12:    return -1;
## 13:  return 0;
   14:}
   15:
   16:struct gameState* newGame() {
   17:  struct gameState* g = malloc(sizeof(struct gameState));
   18:  return g;
   19:}
   20:
   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
   22:		  int k8, int k9, int k10) {
   23:  int* k = malloc(10 * sizeof(int));
   24:  k[0] = k1;
   25:  k[1] = k2;
   26:  k[2] = k3;
   27:  k[3] = k4;
   28:  k[4] = k5;
   29:  k[5] = k6;
   30:  k[6] = k7;
   31:  k[7] = k8;
   32:  k[8] = k9;
   33:  k[9] = k10;
   34:  return k;
   35:}
   36:
## 37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
   38:		   struct gameState *state) {
   39:
   40:  int i;
   41:  int j;
   42:  int it;			
   43:  //set up random number generator
## 44:  SelectStream(1);
## 45:  PutSeed((long)randomSeed);
   46:  
   47:  //check number of players
## 48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
   49:    {
   50:      return -1;
   51:    }
   52:
   53:  //set number of players
## 54:  state->numPlayers = numPlayers;
   55:
   56:  //check selected kingdom cards are different
## 57:  for (i = 0; i < 10; i++)
   58:    {
## 59:      for (j = 0; j < 10; j++)
   60:        {
## 61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
   62:	    {
   63:	      return -1;
   64:	    }
   65:        }
   66:    }
   67:
   68:
   69:  //initialize supply
   70:  ///////////////////////////////
   71:
   72:  //set number of Curse cards
## 73:  if (numPlayers == 2)
   74:    {
## 75:      state->supplyCount[curse] = 10;
   76:    }
   77:  else if (numPlayers == 3)
   78:    {
   79:      state->supplyCount[curse] = 20;
   80:    }
   81:  else
   82:    {
   83:      state->supplyCount[curse] = 30;
   84:    }
   85:
   86:  //set number of Victory cards
## 87:  if (numPlayers == 2)
   88:    {
## 89:      state->supplyCount[estate] = 8;
## 90:      state->supplyCount[duchy] = 8;
## 91:      state->supplyCount[province] = 8;
   92:    }
   93:  else
   94:    {
   95:      state->supplyCount[estate] = 12;
   96:      state->supplyCount[duchy] = 12;
   97:      state->supplyCount[province] = 12;
   98:    }
   99:
   100:  //set number of Treasure cards
## 101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
## 102:  state->supplyCount[silver] = 40;
## 103:  state->supplyCount[gold] = 30;
   104:
   105:  //set number of Kingdom cards
## 106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
   107:    {
## 108:      for (j = 0; j < 10; j++)           		//loop chosen cards
   109:	{
## 110:	  if (kingdomCards[j] == i)
   111:	    {
   112:	      //check if card is a 'Victory' Kingdom card
## 113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
   114:		{
   115:		  if (numPlayers == 2){ 
   116:		    state->supplyCount[i] = 8; 
   117:		  }
   118:		  else{ state->supplyCount[i] = 12; }
   119:		}
   120:	      else
   121:		{
## 122:		  state->supplyCount[i] = 10;
   123:		}
## 124:	      break;
   125:	    }
   126:	  else    //card is not in the set choosen for the game
   127:	    {
## 128:	      state->supplyCount[i] = -1;
   129:	    }
   130:	}
   131:
   132:    }
   133:
   134:  ////////////////////////
   135:  //supply intilization complete
   136:
   137:  //set player decks
## 138:  for (i = 0; i < numPlayers; i++)
   139:    {
## 140:      state->deckCount[i] = 0;
## 141:      for (j = 0; j < 3; j++)
   142:	{
## 143:	  state->deck[i][j] = estate;
## 144:	  state->deckCount[i]++;
   145:	}
## 146:      for (j = 3; j < 10; j++)
   147:	{
## 148:	  state->deck[i][j] = copper;
## 149:	  state->deckCount[i]++;		
   150:	}
   151:    }
   152:
   153:  //shuffle player decks
## 154:  for (i = 0; i < numPlayers; i++)
   155:    {
## 156:      if ( shuffle(i, state) < 0 )
   157:	{
   158:	  return -1;
   159:	}
   160:    }
   161:
   162:  //draw player hands
## 163:  for (i = 0; i < numPlayers; i++)
   164:    {  
   165:      //initialize hand size to zero
## 166:      state->handCount[i] = 0;
## 167:      state->discardCount[i] = 0;
   168:      //draw 5 cards
   169:      // for (j = 0; j < 5; j++)
   170:      //	{
   171:      //	  drawCard(i, state);
   172:      //	}
   173:    }
   174:  
   175:  //set embargo tokens to 0 for all supply piles
## 176:  for (i = 0; i <= treasure_map; i++)
   177:    {
## 178:      state->embargoTokens[i] = 0;
   179:    }
   180:
   181:  //initialize first player's turn
## 182:  state->outpostPlayed = 0;
## 183:  state->phase = 0;
## 184:  state->numActions = 1;
## 185:  state->numBuys = 1;
## 186:  state->playedCardCount = 0;
## 187:  state->whoseTurn = 0;
## 188:  state->handCount[state->whoseTurn] = 0;
   189:  //int it; move to top
   190:
   191:  //Moved draw cards to here, only drawing at the start of a turn
## 192:  for (it = 0; it < 5; it++){
## 193:    drawCard(state->whoseTurn, state);
   194:  }
   195:
## 196:  updateCoins(state->whoseTurn, state, 0);
   197:
## 198:  return 0;
   199:}
   200:
## 201:int shuffle(int player, struct gameState *state) {
   202: 
   203:
   204:  int newDeck[MAX_DECK];
## 205:  int newDeckPos = 0;
   206:  int card;
   207:  int i;
   208:
## 209:  if (state->deckCount[player] < 1)
###210:    return -1;
## 211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
   212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
   213:
## 214:  while (state->deckCount[player] > 0) {
## 215:    card = floor(Random() * state->deckCount[player]);
## 216:    newDeck[newDeckPos] = state->deck[player][card];
## 217:    newDeckPos++;
## 218:    for (i = card; i < state->deckCount[player]-1; i++) {
## 219:      state->deck[player][i] = state->deck[player][i+1];
   220:    }
## 221:    state->deckCount[player]--;
   222:  }
## 223:  for (i = 0; i < newDeckPos; i++) {
## 224:    state->deck[player][i] = newDeck[i];
## 225:    state->deckCount[player]++;
   226:  }
   227:
## 228:  return 0;
   229:}
   230:
   231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
   232:{	
   233:  int card;
   234:  int coin_bonus = 0; 		//tracks coins gain from actions
   235:
   236:  //check if it is the right phase
   237:  if (state->phase != 0)
   238:    {
   239:      return -1;
   240:    }
   241:	
   242:  //check if player has enough actions
   243:  if ( state->numActions < 1 )
   244:    {
   245:      return -1;
   246:    }
   247:	
   248:  //get card played
   249:  card = handCard(handPos, state);
   250:	
   251:  //check if selected card is an action
   252:  if ( card < adventurer || card > treasure_map )
   253:    {
   254:      return -1;
   255:    }
   256:	
   257:  //play card
   258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
   259:    {
   260:      return -1;
   261:    }
   262:	
   263:  //reduce number of actions
   264:  state->numActions--;
   265:
   266:  //update coins (Treasure cards may be added with card draws)
   267:  updateCoins(state->whoseTurn, state, coin_bonus);
   268:	
   269:  return 0;
   270:}
   271:
#  272:int buyCard(int supplyPos, struct gameState *state) {
   273:  int who;
   274:  if (DEBUG){
   275:    printf("Entering buyCard...\n");
   276:  }
   277:
   278:  // I don't know what to do about the phase thing.
   279:
#  280:  who = state->whoseTurn;
   281:
#  282:  if (state->numBuys < 1){
   283:    if (DEBUG)
   284:      printf("You do not have any buys left\n");
#  285:    return -1;
#  286:  } else if (supplyCount(supplyPos, state) <1){
   287:    if (DEBUG)
   288:      printf("There are not any of that type of card left\n");
#  289:    return -1;
#  290:  } else if (state->coins < getCost(supplyPos)){
   291:    if (DEBUG) 
   292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
#  293:    return -1;
   294:  } else {
#  295:    state->phase=1;
   296:    //state->supplyCount[supplyPos]--;
#  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
   298:  
#  299:    state->coins = (state->coins) - (getCost(supplyPos));
#  300:    state->numBuys--;
   301:    if (DEBUG)
   302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
   303:  }
   304:
   305:  //state->discard[who][state->discardCount[who]] = supplyPos;
   306:  //state->discardCount[who]++;
   307:    
#  308:  return 0;
   309:}
   310:
   311:int numHandCards(struct gameState *state) {
   312:  return state->handCount[ whoseTurn(state) ];
   313:}
   314:
   315:int handCard(int handPos, struct gameState *state) {
   316:  int currentPlayer = whoseTurn(state);
   317:  return state->hand[currentPlayer][handPos];
   318:}
   319:
#  320:int supplyCount(int card, struct gameState *state) {
#  321:  return state->supplyCount[card];
   322:}
   323:
   324:int fullDeckCount(int player, int card, struct gameState *state) {
   325:  int i;
   326:  int count = 0;
   327:
   328:  for (i = 0; i < state->deckCount[player]; i++)
   329:    {
   330:      if (state->deck[player][i] == card) count++;
   331:    }
   332:
   333:  for (i = 0; i < state->handCount[player]; i++)
   334:    {
   335:      if (state->hand[player][i] == card) count++;
   336:    }
   337:
   338:  for (i = 0; i < state->discardCount[player]; i++)
   339:    {
   340:      if (state->discard[player][i] == card) count++;
   341:    }
   342:
   343:  return count;
   344:}
   345:
###346:int whoseTurn(struct gameState *state) {
###347:  return state->whoseTurn;
   348:}
   349:
###350:int endTurn(struct gameState *state) {
   351:  int k;
   352:  int i;
###353:  int currentPlayer = whoseTurn(state);
   354:  
   355:  //Discard hand
###356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
###357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
###358:    state->hand[currentPlayer][i] = -1;//Set card to -1
   359:  }
###360:  state->handCount[currentPlayer] = 0;//Reset hand count
   361:    
   362:  //Code for determining the player
###363:  if (currentPlayer < (state->numPlayers - 1)){ 
###364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
   365:  }
   366:  else{
   367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
   368:  }
   369:
###370:  state->outpostPlayed = 0;
###371:  state->phase = 0;
###372:  state->numActions = 1;
###373:  state->coins = 0;
###374:  state->numBuys = 1;
###375:  state->playedCardCount = 0;
###376:  state->handCount[state->whoseTurn] = 0;
   377:
   378:  //int k; move to top
   379:  //Next player draws hand
###380:  for (k = 0; k < 5; k++){
###381:    drawCard(state->whoseTurn, state);//Draw a card
   382:  }
   383:
   384:  //Update money
###385:  updateCoins(state->whoseTurn, state , 0);
   386:
###387:  return 0;
   388:}
   389:
#  390:int isGameOver(struct gameState *state) {
   391:  int i;
   392:  int j;
   393:	
   394:  //if stack of Province cards is empty, the game ends
#  395:  if (state->supplyCount[province] == 0)
   396:    {
   397:      return 1;
   398:    }
   399:
   400:  //if three supply pile are at 0, the game ends
#  401:  j = 0;
#  402:  for (i = 0; i < 25; i++)
   403:  {
#  404:      if (state->supplyCount[i] == 0)
   405:    	{
#  406:    	  j++;
   407:    	}
   408:  }
#  409:  if ( j >= 3)
   410:  {
#  411:    return 1;
   412:  }
   413:
#  414:  return 0;
   415:}
   416:
#  417:int scoreFor (int player, struct gameState *state) {
   418:
   419:  int i;
#  420:  int score = 0;
#  421:  int cardsInDeck = 0;
#  422:  cardsInDeck = state->handCount[player] + state->deckCount[player] + state->discardCount[player];
   423:  //score from hand
#  424:  for (i = 0; i < state->handCount[player]; i++)
   425:    {
#  426:      if (state->hand[player][i] == curse) { score = score - 1; };
#  427:      if (state->hand[player][i] == estate) { score = score + 1; };
#  428:      if (state->hand[player][i] == duchy) { score = score + 3; };
#  429:      if (state->hand[player][i] == province) { score = score + 6; };
#  430:      if (state->hand[player][i] == great_hall) { score = score + 1; };
#  431:      if (state->hand[player][i] == gardens) { score = score + ( cardsInDeck / 10 ); };
   432:    }
   433:
   434:  //score from discard
#  435:  for (i = 0; i < state->discardCount[player]; i++)
   436:    {
#  437:      if (state->discard[player][i] == curse) { score = score - 1; };
#  438:      if (state->discard[player][i] == estate) { score = score + 1; };
#  439:      if (state->discard[player][i] == duchy) { score = score + 3; };
#  440:      if (state->discard[player][i] == province) { score = score + 6; };
#  441:      if (state->discard[player][i] == great_hall) { score = score + 1; };
#  442:      if (state->discard[player][i] == gardens) { score = score + ( cardsInDeck / 10 ); };
   443:    }
   444:
   445:  //score from deck
#  446:  for (i = 0; i < state->deckCount[player]; i++)
   447:    {
#  448:      if (state->deck[player][i] == curse) { score = score - 1; };
#  449:      if (state->deck[player][i] == estate) { score = score + 1; };
#  450:      if (state->deck[player][i] == duchy) { score = score + 3; };
#  451:      if (state->deck[player][i] == province) { score = score + 6; };
#  452:      if (state->deck[player][i] == great_hall) { score = score + 1; };
#  453:      if (state->deck[player][i] == gardens) { score = score + ( cardsInDeck / 10 ); };
   454:    }
   455:
#  456:  return score;
   457:}
   458:
   459:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
   460:  int i;	
   461:  int j;
   462:  int highScore;
   463:  int currentPlayer;
   464:
   465:  //get score for each player
   466:  for (i = 0; i < MAX_PLAYERS; i++)
   467:    {
   468:      //set unused player scores to -9999
   469:      if (i >= state->numPlayers)
   470:	{
   471:	  players[i] = -9999;
   472:	}
   473:      else
   474:	{
   475:	  players[i] = scoreFor (i, state);
   476:	}
   477:    }
   478:
   479:  //find highest score
   480:  j = 0;
   481:  for (i = 0; i < MAX_PLAYERS; i++)
   482:    {
   483:      if (players[i] > players[j])
   484:	{
   485:	  j = i;
   486:	}
   487:    }
   488:  highScore = players[j];
   489:
   490:  //add 1 to players who had less turns
   491:  currentPlayer = whoseTurn(state);
   492:  for (i = 0; i < MAX_PLAYERS; i++)
   493:    {
   494:      if ( players[i] == highScore && i > currentPlayer )
   495:	{
   496:	  players[i]++;
   497:	}
   498:    }
   499:
   500:  //find new highest score
   501:  j = 0;
   502:  for (i = 0; i < MAX_PLAYERS; i++)
   503:    {
   504:      if ( players[i] > players[j] )
   505:	{
   506:	  j = i;
   507:	}
   508:    }
   509:  highScore = players[j];
   510:
   511:  //set winners in array to 1 and rest to 0
   512:  for (i = 0; i < MAX_PLAYERS; i++)
   513:    {
   514:      if ( players[i] == highScore )
   515:	{
   516:	  players[i] = 1;
   517:	}
   518:      else
   519:	{
   520:	  players[i] = 0;
   521:	}
   522:    }
   523:
   524:  return 0;
   525:}
   526:
## 527:int drawCard(int player, struct gameState *state)
   528:{	int count;
   529:  int deckCounter;
## 530:  if (state->deckCount[player] <= 0){//Deck is empty
   531:    
   532:    //Step 1 Shuffle the discard pile back into a deck
   533:    int i;
   534:    //Move discard to deck
###535:    for (i = 0; i < state->discardCount[player];i++){
###536:      state->deck[player][i] = state->discard[player][i];
###537:      state->discard[player][i] = -1;
   538:    }
   539:
###540:    state->deckCount[player] = state->discardCount[player];
###541:    state->discardCount[player] = 0;//Reset discard
   542:
   543:    //Shufffle the deck
###544:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
   545:   
   546:    if (DEBUG){//Debug statements
   547:      printf("Deck count now: %d\n", state->deckCount[player]);
   548:    }
   549:    
###550:    state->discardCount[player] = 0;
   551:
   552:    //Step 2 Draw Card
###553:    count = state->handCount[player];//Get current player's hand count
   554:    
   555:    if (DEBUG){//Debug statements
   556:      printf("Current hand count: %d\n", count);
   557:    }
   558:    
###559:    deckCounter = state->deckCount[player];//Create a holder for the deck count
   560:
###561:    if (deckCounter == 0)
###562:      return -1;
   563:
###564:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
###565:    state->deckCount[player]--;
###566:    state->handCount[player]++;//Increment hand count
   567:  }
   568:
   569:  else{
## 570:    int count = state->handCount[player];//Get current hand count for player
   571:    int deckCounter;
   572:    if (DEBUG){//Debug statements
   573:      printf("Current hand count: %d\n", count);
   574:    }
   575:
## 576:    deckCounter = state->deckCount[player];//Create holder for the deck count
## 577:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
## 578:    state->deckCount[player]--;
## 579:    state->handCount[player]++;//Increment hand count
   580:  }
   581:
## 582:  return 0;
   583:}
   584:
#  585:int getCost(int cardNumber)
   586:{
#  587:  switch( cardNumber ) 
   588:    {
   589:    case curse:
   590:      return 0;
   591:    case estate:
   592:      return 2;
   593:    case duchy:
   594:      return 5;
   595:    case province:
   596:      return 8;
   597:    case copper:
   598:      return 0;
   599:    case silver:
   600:      return 3;
   601:    case gold:
   602:      return 6;
   603:    case adventurer:
   604:      return 6;
   605:    case council_room:
   606:      return 5;
   607:    case feast:
   608:      return 4;
   609:    case gardens:
   610:      return 4;
   611:    case mine:
   612:      return 5;
   613:    case remodel:
   614:      return 4;
   615:    case smithy:
#  616:      return 4;
   617:    case village:
   618:      return 3;
   619:    case baron:
   620:      return 4;
   621:    case great_hall:
   622:      return 3;
   623:    case minion:
   624:      return 5;
   625:    case steward:
   626:      return 3;
   627:    case tribute:
   628:      return 5;
   629:    case ambassador:
   630:      return 3;
   631:    case cutpurse:
   632:      return 4;
   633:    case embargo: 
   634:      return 2;
   635:    case outpost:
   636:      return 5;
   637:    case salvager:
   638:      return 4;
   639:    case sea_hag:
   640:      return 4;
   641:    case treasure_map:
   642:      return 4;
   643:    }
   644:	
   645:  return -1;
   646:}
   647:
###648:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
   649:{
   650:  int i;
   651:  int j;
   652:  int k;
   653:  int x;
   654:  int index;
###655:  int currentPlayer = whoseTurn(state);
###656:  int nextPlayer = currentPlayer + 1;
   657:
###658:  int tributeRevealedCards[2] = {-1, -1};
   659:  int temphand[MAX_HAND];// moved above the if statement
###660:  int drawntreasure=0;
   661:  int cardDrawn;
###662:  int z = 0;// this is the counter for the temp hand
###663:  if (nextPlayer > (state->numPlayers - 1)){
   664:    nextPlayer = 0;
   665:  }
   666:  
   667:	
   668:  //uses switch to select card and perform actions
###669:  switch( card ) 
   670:    {
   671:    case adventurer:
###672:      return cardEffectAdventurer(state, currentPlayer);
   673:			
   674:    case council_room:
   675:      //+4 Cards
   676:      for (i = 0; i < 4; i++)
   677:	{
   678:	  drawCard(currentPlayer, state);
   679:	}
   680:			
   681:      //+1 Buy
   682:      state->numBuys++;
   683:			
   684:      //Each other player draws a card
   685:      for (i = 0; i < state->numPlayers; i++)
   686:	{
   687:	  if ( i != currentPlayer )
   688:	    {
   689:	      drawCard(i, state);
   690:	    }
   691:	}
   692:			
   693:      //put played card in played card pile
   694:      discardCard(handPos, currentPlayer, state, 0);
   695:			
   696:      return 0;
   697:			
   698:    case feast:
   699:      //gain card with cost up to 5
   700:      //Backup hand
   701:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
   702:	temphand[i] = state->hand[currentPlayer][i];//Backup card
   703:	state->hand[currentPlayer][i] = -1;//Set to nothing
   704:      }
   705:      //Backup hand
   706:
   707:      //Update Coins for Buy
   708:      updateCoins(currentPlayer, state, 5);
   709:      x = 1;//Condition to loop on
   710:      while( x == 1) {//Buy one card
   711:	if (supplyCount(choice1, state) <= 0){
   712:	  if (DEBUG)
   713:	    printf("None of that card left, sorry!\n");
   714:
   715:	  if (DEBUG){
   716:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
   717:	  }
   718:	}
   719:	else if (state->coins < getCost(choice1)){
   720:	  printf("That card is too expensive!\n");
   721:
   722:	  if (DEBUG){
   723:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
   724:	  }
   725:	}
   726:	else{
   727:
   728:	  if (DEBUG){
   729:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
   730:	  }
   731:
   732:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
   733:	  x = 0;//No more buying cards
   734:
   735:	  if (DEBUG){
   736:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
   737:	  }
   738:
   739:	}
   740:      }     
   741:
   742:      //Reset Hand
   743:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
   744:	state->hand[currentPlayer][i] = temphand[i];
   745:	temphand[i] = -1;
   746:      }
   747:      //Reset Hand
   748:      			
   749:      return 0;
   750:			
   751:    case gardens:
   752:      return -1;
   753:			
   754:    case mine:
   755:      j = state->hand[currentPlayer][choice1];  //store card we will trash
   756:
   757:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
   758:	{
   759:	  return -1;
   760:	}
   761:		
   762:      if (choice2 > treasure_map || choice2 < curse)
   763:	{
   764:	  return -1;
   765:	}
   766:
   767:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
   768:	{
   769:	  return -1;
   770:	}
   771:
   772:      gainCard(choice2, state, 2, currentPlayer);
   773:
   774:      //discard card from hand
   775:      discardCard(handPos, currentPlayer, state, 0);
   776:
   777:      //discard trashed card
   778:      for (i = 0; i < state->handCount[currentPlayer]; i++)
   779:	{
   780:	  if (state->hand[currentPlayer][i] == j)
   781:	    {
   782:	      discardCard(i, currentPlayer, state, 0);			
   783:	      break;
   784:	    }
   785:	}
   786:			
   787:      return 0;
   788:			
   789:    case remodel:
   790:      j = state->hand[currentPlayer][choice1];  //store card we will trash
   791:
   792:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
   793:	{
   794:	  return -1;
   795:	}
   796:
   797:      gainCard(choice2, state, 0, currentPlayer);
   798:
   799:      //discard card from hand
   800:      discardCard(handPos, currentPlayer, state, 0);
   801:
   802:      //discard trashed card
   803:      for (i = 0; i < state->handCount[currentPlayer]; i++)
   804:	{
   805:	  if (state->hand[currentPlayer][i] == j)
   806:	    {
   807:	      discardCard(i, currentPlayer, state, 0);			
   808:	      break;
   809:	    }
   810:	}
   811:
   812:
   813:      return 0;
   814:		
   815:    case smithy:
###816:      return cardEffectSmithy(state, currentPlayer, handPos);
   817:		
   818:    case village:
###819:      return cardEffectVillage(state, currentPlayer, handPos);
   820:		
   821:    case baron:
   822:      state->numBuys++;//Increase buys by 1!
   823:      if (choice1 > 0){//Boolean true or going to discard an estate
   824:	int p = 0;//Iterator for hand!
   825:	int card_not_discarded = 1;//Flag for discard set!
   826:	while(card_not_discarded){
   827:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
   828:	    state->coins += 4;//Add 4 coins to the amount of coins
   829:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
   830:	    state->discardCount[currentPlayer]++;
   831:	    for (;p < state->handCount[currentPlayer]; p++){
   832:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
   833:	    }
   834:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
   835:	    state->handCount[currentPlayer]--;
   836:	    card_not_discarded = 0;//Exit the loop
   837:	  }
   838:	  else if (p > state->handCount[currentPlayer]){
   839:	    if(DEBUG) {
   840:	      printf("No estate cards in your hand, invalid choice\n");
   841:	      printf("Must gain an estate if there are any\n");
   842:	    }
   843:	    if (supplyCount(estate, state) > 0){
   844:	      gainCard(estate, state, 0, currentPlayer);
   845:	      state->supplyCount[estate]--;//Decrement estates
   846:	      if (supplyCount(estate, state) == 0){
   847:		isGameOver(state);
   848:	      }
   849:	    }
   850:	    card_not_discarded = 0;//Exit the loop
   851:	  }
   852:			    
   853:	  else{
   854:	    p++;//Next card
   855:	  }
   856:	}
   857:      }
   858:			    
   859:      else{
   860:	if (supplyCount(estate, state) > 0){
   861:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
   862:	  state->supplyCount[estate]--;//Decrement Estates
   863:	  if (supplyCount(estate, state) == 0){
   864:	    isGameOver(state);
   865:	  }
   866:	}
   867:      }
   868:	    
   869:      
   870:      return 0;
   871:		
   872:    case great_hall:
   873:      //+1 Card
   874:      drawCard(currentPlayer, state);
   875:			
   876:      //+1 Actions
   877:      state->numActions++;
   878:			
   879:      //discard card from hand
   880:      discardCard(handPos, currentPlayer, state, 0);
   881:      return 0;
   882:		
   883:    case minion:
   884:      //+1 action
   885:      state->numActions++;
   886:			
   887:      //discard card from hand
   888:      discardCard(handPos, currentPlayer, state, 0);
   889:			
   890:      if (choice1)		//+2 coins
   891:	{
   892:	  state->coins = state->coins + 2;
   893:	}
   894:			
   895:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
   896:	{
   897:	  //discard hand
   898:	  while(numHandCards(state) > 0)
   899:	    {
   900:	      discardCard(handPos, currentPlayer, state, 0);
   901:	    }
   902:				
   903:	  //draw 4
   904:	  for (i = 0; i < 4; i++)
   905:	    {
   906:	      drawCard(currentPlayer, state);
   907:	    }
   908:				
   909:	  //other players discard hand and redraw if hand size > 4
   910:	  for (i = 0; i < state->numPlayers; i++)
   911:	    {
   912:	      if (i != currentPlayer)
   913:		{
   914:		  if ( state->handCount[i] > 4 )
   915:		    {
   916:		      //discard hand
   917:		      while( state->handCount[i] > 0 )
   918:			{
   919:			  discardCard(handPos, i, state, 0);
   920:			}
   921:							
   922:		      //draw 4
   923:		      for (j = 0; j < 4; j++)
   924:			{
   925:			  drawCard(i, state);
   926:			}
   927:		    }
   928:		}
   929:	    }
   930:				
   931:	}
   932:      return 0;
   933:		
   934:    case steward:
   935:      if (choice1 == 1)
   936:	{
   937:	  //+2 cards
   938:	  drawCard(currentPlayer, state);
   939:	  drawCard(currentPlayer, state);
   940:	}
   941:      else if (choice1 == 2)
   942:	{
   943:	  //+2 coins
   944:	  state->coins = state->coins + 2;
   945:	}
   946:      else
   947:	{
   948:	  //trash 2 cards in hand
   949:	  discardCard(choice2, currentPlayer, state, 1);
   950:	  discardCard(choice3, currentPlayer, state, 1);
   951:	}
   952:			
   953:      //discard card from hand
   954:      discardCard(handPos, currentPlayer, state, 0);
   955:      return 0;
   956:		
   957:    case tribute:
   958:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
   959:	if (state->deckCount[nextPlayer] > 0){
   960:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
   961:	  state->deckCount[nextPlayer]--;
   962:	}
   963:	else if (state->discardCount[nextPlayer] > 0){
   964:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
   965:	  state->discardCount[nextPlayer]--;
   966:	}
   967:	else{
   968:	  //No Card to Reveal
   969:	  if (DEBUG){
   970:	    printf("No cards to reveal\n");
   971:	  }
   972:	}
   973:      }
   974:	    
   975:      else{
   976:	if (state->deckCount[nextPlayer] == 0){
   977:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
   978:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
   979:	    state->deckCount[nextPlayer]++;
   980:	    state->discard[nextPlayer][i] = -1;
   981:	    state->discardCount[nextPlayer]--;
   982:	  }
   983:			    
   984:	  shuffle(nextPlayer,state);//Shuffle the deck
   985:	} 
   986:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
   987:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
   988:	state->deckCount[nextPlayer]--;
   989:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
   990:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
   991:	state->deckCount[nextPlayer]--;
   992:      }    
   993:		       
   994:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
   995:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
   996:	state->playedCardCount++;
   997:	tributeRevealedCards[1] = -1;
   998:      }
   999:
   1000:      for (i = 0; i <= 2; i ++){
   1001:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
   1002:	  state->coins += 2;
   1003:	}
   1004:		    
   1005:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
   1006:	  drawCard(currentPlayer, state);
   1007:	  drawCard(currentPlayer, state);
   1008:	}
   1009:	else{//Action Card
   1010:	  state->numActions = state->numActions + 2;
   1011:	}
   1012:      }
   1013:	    
   1014:      return 0;
   1015:		
   1016:    case ambassador:
   1017:      j = 0;		//used to check if player has enough cards to discard
   1018:
   1019:      if (choice2 > 2 || choice2 < 0)
   1020:	{
   1021:	  return -1;				
   1022:	}
   1023:
   1024:      if (choice1 == handPos)
   1025:	{
   1026:	  return -1;
   1027:	}
   1028:
   1029:      for (i = 0; i < state->handCount[currentPlayer]; i++)
   1030:	{
   1031:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
   1032:	    {
   1033:	      j++;
   1034:	    }
   1035:	}
   1036:      if (j < choice2)
   1037:	{
   1038:	  return -1;				
   1039:	}
   1040:
   1041:      if (DEBUG) 
   1042:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
   1043:
   1044:      //increase supply count for choosen card by amount being discarded
   1045:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
   1046:			
   1047:      //each other player gains a copy of revealed card
   1048:      for (i = 0; i < state->numPlayers; i++)
   1049:	{
   1050:	  if (i != currentPlayer)
   1051:	    {
   1052:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
   1053:	    }
   1054:	}
   1055:
   1056:      //discard played card from hand
   1057:      discardCard(handPos, currentPlayer, state, 0);			
   1058:
   1059:      //trash copies of cards returned to supply
   1060:      for (j = 0; j < choice2; j++)
   1061:	{
   1062:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
   1063:	    {
   1064:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
   1065:		{
   1066:		  discardCard(i, currentPlayer, state, 1);
   1067:		  break;
   1068:		}
   1069:	    }
   1070:	}			
   1071:
   1072:      return 0;
   1073:		
   1074:    case cutpurse:
   1075:
   1076:      updateCoins(currentPlayer, state, 2);
   1077:      for (i = 0; i < state->numPlayers; i++)
   1078:	{
   1079:	  if (i != currentPlayer)
   1080:	    {
   1081:	      for (j = 0; j < state->handCount[i]; j++)
   1082:		{
   1083:		  if (state->hand[i][j] == copper)
   1084:		    {
   1085:		      discardCard(j, i, state, 0);
   1086:		      break;
   1087:		    }
   1088:		  if (j == state->handCount[i])
   1089:		    {
   1090:		      for (k = 0; k < state->handCount[i]; k++)
   1091:			{
   1092:			  if (DEBUG)
   1093:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
   1094:			}	
   1095:		      break;
   1096:		    }		
   1097:		}
   1098:					
   1099:	    }
   1100:				
   1101:	}				
   1102:
   1103:      //discard played card from hand
   1104:      discardCard(handPos, currentPlayer, state, 0);			
   1105:
   1106:      return 0;
   1107:
   1108:		
   1109:    case embargo: 
   1110:      return cardEffectEmbargo(state, currentPlayer, handPos, choice1);
   1111:		
   1112:    case outpost:
###1113:      return cardEffectOutpost(state, currentPlayer, handPos);
   1114:		
   1115:    case salvager:
   1116:      //+1 buy
   1117:      state->numBuys++;
   1118:			
   1119:      if (choice1)
   1120:	{
   1121:	  //gain coins equal to trashed card
   1122:	  state->coins = state->coins + getCost( handCard(choice1, state) );
   1123:	  //trash card
   1124:	  discardCard(choice1, currentPlayer, state, 1);	
   1125:	}
   1126:			
   1127:      //discard card
   1128:      discardCard(handPos, currentPlayer, state, 0);
   1129:      return 0;
   1130:		
   1131:    case sea_hag:
   1132:      for (i = 0; i < state->numPlayers; i++){
   1133:	if (i != currentPlayer){
   1134:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
   1135:	  state->discardCount[i]++;
   1136:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
   1137:	}
   1138:      }
   1139:      return 0;
   1140:		
   1141:    case treasure_map:
   1142:      //search hand for another treasure_map
   1143:      index = -1;
   1144:      for (i = 0; i < state->handCount[currentPlayer]; i++)
   1145:	{
   1146:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
   1147:	    {
   1148:	      index = i;
   1149:	      break;
   1150:	    }
   1151:	}
   1152:      if (index > -1)
   1153:	{
   1154:	  //trash both treasure cards
   1155:	  discardCard(handPos, currentPlayer, state, 1);
   1156:	  discardCard(index, currentPlayer, state, 1);
   1157:
   1158:	  //gain 4 Gold cards
   1159:	  for (i = 0; i < 4; i++)
   1160:	    {
   1161:	      gainCard(gold, state, 1, currentPlayer);
   1162:	    }
   1163:				
   1164:	  //return success
   1165:	  return 1;
   1166:	}
   1167:			
   1168:      //no second treasure_map found in hand
   1169:      return -1;
   1170:    }
   1171:	
   1172:  return -1;
   1173:}
   1174:
###1175:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
   1176:{
   1177:	
   1178:  //if card is not trashed, added to Played pile 
###1179:  if (trashFlag < 1)
   1180:    {
   1181:      //add card to played pile
###1182:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
###1183:      state->playedCardCount++;
   1184:    }
   1185:	
   1186:  //set played card to -1
###1187:  state->hand[currentPlayer][handPos] = -1;
   1188:	
   1189:  //remove card from player's hand
###1190:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
   1191:    {
   1192:      //reduce number of cards in hand
   1193:      state->handCount[currentPlayer]--;
   1194:    }
###1195:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
   1196:    {
   1197:      //reduce number of cards in hand
   1198:      state->handCount[currentPlayer]--;
   1199:    }
   1200:  else 	
   1201:    {
   1202:      //replace discarded card with last card in hand
###1203:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
   1204:      //set last card to -1
###1205:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
   1206:      //reduce number of cards in hand
###1207:      state->handCount[currentPlayer]--;
   1208:    }
   1209:	
###1210:  return 0;
   1211:}
   1212:
#  1213:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
   1214:{
   1215:  //Note: supplyPos is enum of choosen card
   1216:	
   1217:  //check if supply pile is empty (0) or card is not used in game (-1)
#  1218:  if ( supplyCount(supplyPos, state) < 1 )
   1219:    {
   1220:      return -1;
   1221:    }
   1222:	
   1223:  //added card for [whoseTurn] current player:
   1224:  // toFlag = 0 : add to discard
   1225:  // toFlag = 1 : add to deck
   1226:  // toFlag = 2 : add to hand
   1227:
#  1228:  if (toFlag == 1)
   1229:    {
   1230:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
   1231:      state->deckCount[player]++;
   1232:    }
#  1233:  else if (toFlag == 2)
   1234:    {
   1235:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
   1236:      state->handCount[player]++;
   1237:    }
   1238:  else
   1239:    {
#  1240:      state->discard[player][ state->discardCount[player] ] = supplyPos;
#  1241:      state->discardCount[player]++;
   1242:    }
   1243:	
   1244:  //decrease number in supply pile
#  1245:  state->supplyCount[supplyPos]--;
   1246:	 
#  1247:  return 0;
   1248:}
   1249:
## 1250:int updateCoins(int player, struct gameState *state, int bonus)
   1251:{
   1252:  int i;
   1253:	
   1254:  //reset coin count
## 1255:  state->coins = 0;
   1256:
   1257:  //add coins for each Treasure card in player's hand
## 1258:  for (i = 0; i < state->handCount[player]; i++)
   1259:    {
## 1260:      if (state->hand[player][i] == copper)
   1261:	{
## 1262:	  state->coins += 1;
   1263:	}
## 1264:      else if (state->hand[player][i] == silver)
   1265:	{
   1266:	  state->coins += 2;
   1267:	}
## 1268:      else if (state->hand[player][i] == gold)
   1269:	{
   1270:	  state->coins += 3;
   1271:	}	
   1272:    }	
   1273:
   1274:  //add bonus
## 1275:  state->coins += bonus;
   1276:
## 1277:  return 0;
   1278:}
   1279:
###1280:int cardEffectAdventurer(struct gameState *state, int currentPlayer)
   1281:{
   1282:    int temphand[MAX_HAND];// moved above the if statement
###1283:    int drawntreasure=0;
###1284:    int z = 0;// this is the counter for the temp hand
   1285:    int cardDrawn;
   1286:
###1287:    while(drawntreasure<3){
###1288:      if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
###1289:        shuffle(currentPlayer, state);
   1290:      }
###1291:      drawCard(currentPlayer, state);
###1292:      cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
###1293:      if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
###1294:        drawntreasure++;
   1295:      else{
###1296:        temphand[z]=cardDrawn;
###1297:        state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
###1298:        z++;
   1299:      }
   1300:    }
###1301:    while(z-1>=0){
###1302:      state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
###1303:      z=z-1;
   1304:    }
   1305:
###1306:  return 0;
   1307:
   1308:}
   1309:
###1310:int cardEffectSmithy(struct gameState *state, int currentPlayer, int handPos)
   1311:{
   1312:  int i;
   1313:
   1314:  //+3 Cards
###1315:  for (i = 0; i < 2; i++)
   1316:  {
###1317:    drawCard(currentPlayer, state);
   1318:  }
   1319:      
   1320:  //discard card from hand
###1321:  discardCard(handPos, currentPlayer, state, 0);
   1322:
###1323:  return 0;
   1324:}
   1325:
###1326:int cardEffectVillage(struct gameState *state, int currentPlayer, int handPos)
   1327:{
   1328:    //+1 Card
   1329:    //drawCard(currentPlayer, state);
   1330:      
   1331:    //+2 Actions
###1332:    state->numActions = state->numActions + 2;
   1333:    
   1334:    //discard played card from hand
###1335:    discardCard(handPos, currentPlayer, state, 0);
   1336:
###1337:    return 0;
   1338:}
   1339:
###1340:int cardEffectOutpost(struct gameState *state, int currentPlayer, int handPos)
   1341:{
   1342:    //set outpost flag
   1343:    //state->outpostPlayed++;
   1344:    
   1345:    //discard card
###1346:    discardCard(handPos, currentPlayer, state, 0);
   1347:
###1348:    return 0;
   1349:}
   1350:
   1351:int cardEffectEmbargo(struct gameState *state, int currentPlayer, int handPos, int choice1)
   1352:{
   1353:    //+2 Coins
   1354:    state->coins = state->coins + 2;
   1355:      
   1356:    //see if selected pile is in play
   1357:    if ( state->supplyCount[choice1] == -1 )
   1358:    {
   1359:      return -1;
   1360:    }
   1361:      
   1362:    //add embargo token to selected supply pile
   1363:    state->embargoTokens[choice1]++;
   1364:      
   1365:    //trash card
   1366:    discardCard(handPos, currentPlayer, state, 1);
   1367:
   1368:    return 0;
   1369:}
   1370:
   1371://end of dominion.c
   1372:
